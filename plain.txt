receipt-app/
├── app.py                 # FlaskまたはFastAPIのメインスクリプト
├── static/                # フロント側の静的ファイル（CSS, JS）
│   └── ...
├── templates/             # HTMLファイル（FlaskならJinjaテンプレート）
│   └── index.html
├── uploads/               # アップロードされた画像の保存先
├── models/                # 商品・金額などのデータモデル（必要に応じて）
├── database/              # DB関連ファイル（SQLiteなど）
└── requirements.txt       # 使用するPythonライブラリ一覧


フロントエンド：
HTML/CSS/JavaScript: 基本的なHTMLでレシート画像のアップロードインターフェースを作成し、CSSでスタイルを調整、JavaScriptで画像のアップロード処理を行う
・入力
    ・レシートから読み取り
        ・撮影
        ・画像をアップロード
        
        リストを生成し、手動で編集

    ・手動入力
        属性（初期値：支出）
        日付（初期値：今日）
        メモ（自動入力：商品名）
        金額
        カテゴリ

        商品（リスト）を追加/削除

    入力確定
    「入力データを保存しました」

・ログ
    保存された内容を月ごとに、一覧にして表示
    収入
    支出
    合計金額
    繰り越し
    残高

    ・検索機能（メモ、タグから検索）

・レポート
    カテゴリごとに月間/年間/全期間の支出を計算、グラフを表示

・メニュー
    ・設定
        ・カテゴリーの編集
        ・パスワード設定（ログイン設定）
    ・テーマカラー
    ・ヘルプ

バックエンド：
Flask: 軽量なPythonのWebフレームワーク。画像アップロードを受け取り、OCR処理を行い、結果を返すAPIを作成。
SQLite: レシートデータ（商品名や金額）を保存するために使用。
pytesseract: PythonからTesseract OCRを使うためのライブラリ。画像からテキストを抽出。
Pillow: 画像の前処理や簡単な操作を行うために使用（画像のリサイズや回転など）。

レシート読み取り

    画像アップロード/撮影してアップロード
        画像の前処理（白黒変換・ノイズ除去）

    OCRで文字抽出、テキストに変換
    
    テキストから「商品名」「金額」を抽出
        商品名＞改行の次
        金額＞円の前
    
    SQLite 保存・表示




その他：
Gunicorn: FlaskをHerokuにデプロイする際に必要なWSGIサーバー
Procfile: Heroku用の設定ファイル

開発ツール：VSCode、Git